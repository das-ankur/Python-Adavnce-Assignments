Q1. In Python 3.X, what are the names and functions of string object types?
Ans. Name of  a string object can be anyname which follows reules to be 
identifier. There are several methods of string which are:
capitalize()	Converts the first character to upper case
casefold()	Converts string into lower case
center()	Returns a centered string
count()	Returns the number of times a specified value occurs in a string
encode()	Returns an encoded version of the string
endswith()	Returns true if the string ends with the specified value
expandtabs()	Sets the tab size of the string
find()	Searches the string for a specified value and returns the position of where it was found
format()	Formats specified values in a string
format_map()	Formats specified values in a string
index()	Searches the string for a specified value and returns the position of where it was found
isalnum()	Returns True if all characters in the string are alphanumeric
isalpha()	Returns True if all characters in the string are in the alphabet
isdecimal()	Returns True if all characters in the string are decimals
isdigit()	Returns True if all characters in the string are digits
isidentifier()	Returns True if the string is an identifier
islower()	Returns True if all characters in the string are lower case
isnumeric()	Returns True if all characters in the string are numeric
isprintable()	Returns True if all characters in the string are printable
isspace()	Returns True if all characters in the string are whitespaces
istitle()	Returns True if the string follows the rules of a title
isupper()	Returns True if all characters in the string are upper case
join()	Joins the elements of an iterable to the end of the string
ljust()	Returns a left justified version of the string
lower()	Converts a string into lower case
lstrip()	Returns a left trim version of the string
maketrans()	Returns a translation table to be used in translations
partition()	Returns a tuple where the string is parted into three parts
replace()	Returns a string where a specified value is replaced with a specified value
rfind()	Searches the string for a specified value and returns the last position of where it was found
rindex()	Searches the string for a specified value and returns the last position of where it was found
rjust()	Returns a right justified version of the string
rpartition()	Returns a tuple where the string is parted into three parts
rsplit()	Splits the string at the specified separator, and returns a list
rstrip()	Returns a right trim version of the string
split()	Splits the string at the specified separator, and returns a list
splitlines()	Splits the string at line breaks and returns a list
startswith()	Returns true if the string starts with the specified value
strip()	Returns a trimmed version of the string
swapcase()	Swaps cases, lower case becomes upper case and vice versa
title()	Converts the first character of each word to upper case
translate()	Returns a translated string
upper()	Converts a string into upper case
zfill()	Fills the string with a specified number of 0 values at the beginning

Q2. How do the string forms in Python 3.X vary in terms of operations?
Ans. 
Image result for In Python 3.X, what are the names and functions of string object types
In Python, Strings are arrays of bytes representing Unicode characters. A string is a 
collection of one or more characters put in a single quote, double-quote or triple quote. 
In python there is no character data type, a character is a string of length one. It is 
represented by str class.

Q3. In 3.X, how do you put non-ASCII Unicode characters in a string?
Ans. Use str. encode() to remove non-ASCII characters
Call str. encode(encoding, errors) with encoding as "ASCII" and errors 
as "ignore" to return str without "ASCII" characters. Use str. decode() 
to encode str .

Q4. In Python 3.X, what are the key differences between text-mode and binary-mode files?
Ans. Text mode, usually by default, and binary mode. Obviously, in text mode, the program 
writes data to file as text characters, and in binary mode, the program writes data to files 
as 0/1 bits. 

Q5. How can you interpret a Unicode text file containing text encoded in a different encoding than
your platform's default?
Ans. 
Read text file in python2, you should decode line to get unicode string, encode line before writing 
to a file. In python3, open function supports encoding keyword parameter, decoding/encoding can happen 
under the hood automatically. 

Q6. What is the best way to make a Unicode text file in a particular encoding format?
Ans. By using the function str.encode() we can make a unicode text file in particular
encoding format.

Q7. What qualifies ASCII text as a form of Unicode text?
Ans. ASCII has its equivalent in Unicode. The difference between ASCII and Unicode is that ASCII represents 
lowercase letters (a-z), uppercase letters (A-Z), digits (0â€“9) and symbols such as punctuation marks while 
Unicode represents letters of English, Arabic, Greek etc.

Q8. How much of an effect does the change in string types in Python 3.X have on your code?
Ans. It depends on where  I am using the string where it's changed.
